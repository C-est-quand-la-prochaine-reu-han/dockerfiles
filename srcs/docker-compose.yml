services:
  # Handle httpS encryption, WAF ModSecurity and forward requests to other services
  reverse-proxy:
    env_file:
      - path: .env
        required: true
    build:
      context: requirements/reverse-proxy
      dockerfile: Dockerfile
      args:
        HOSTNAME: ${HOSTNAME}
        API_PORT: ${API_PORT}
        PONG_PORT: ${PONG_PORT}
    ports:
      - 8443:443
    networks:
      - transcendence
    restart: always
    depends_on:
      web:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      pong:
        condition: service_healthy
      api:
        condition: service_healthy

  # Serves useful data about a player and its stats.
  api:
    env_file:
      - path: .env
        required: true
    environment:
      WSGI_FILE: ${API_WSGI_FILE}
      HOSTNAME: ${HOSTNAME}
      PORT: ${API_PORT}
    build:
      context: requirements/api
      dockerfile: Dockerfile
      args:
        HOSTNAME: ${HOSTNAME}
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: "wget -O/dev/null -q http://127.0.0.1:${API_PORT}/appong/api/"
      interval: 0.5s
      retries: 10
    depends_on:
      postgresql:
        condition: service_healthy

  # Serves the end-user interface
  web:
    build:
      context: requirements/web
      dockerfile: Dockerfile
    networks:
      - transcendence
    restart: always
    env_file:
      - path: .env
        required: true
    healthcheck:
      test: "curl http://127.0.0.1/"
      interval: 2s
      retries: 10
      start_period: 5s

  # Handles the gameplay and the synchronisation of the games between multiple clients.
  pong:
    env_file:
      - path: .env
        required: true
    build:
      context: requirements/pong
      dockerfile: Dockerfile
      args:
        PORT: ${PONG_PORT}
    networks:
      - transcendence
    restart: always
    depends_on:
      postgresql:
        condition: service_healthy
    # Python handles signals right before interpreting each line, only on its main thread.
    # If a line takes ages to execute, the signal will be greatly delayed.
    # The running app is waiting for new connections on its main thread, which means no signals are handled if no connections are opened.
    # As there's no critical data on this app, it can be closed brutally with a SIGINT without risks.
    stop_signal: SIGINT
    healthcheck:
      test: 'curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" http://127.0.0.1:${PONG_PORT}'
      interval: 1s
      retries: 25
 
  # Hold informations about the playerbase, the tournaments and whatever we need to store.
  postgresql:
    build:
      context: requirements/postgresql
      dockerfile: Dockerfile
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: "pg_isready -h 127.0.0.1 -p 5432 -t 2"
      interval: 0.5s
      retries: 20
    env_file:
      - path: .env
        required: true
    volumes:
      - postgresql:/var/lib/postgresql
      
networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  postgresql:
    driver_opts:
      o: bind
      type: none
      device: ${HOME}/ft_transcendence/postgresql
