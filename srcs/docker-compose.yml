services:
  # Handle httpS encryption, WAF ModSecurity and forward requests to other services
  reverse-proxy:
    build:
      context: requirements/reverse-proxy
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    networks:
      - transcendence
    restart: always
    depends_on:
      web:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      pong:
        condition: service_healthy
      api:
        condition: service_healthy
    env_file:
      - path: .env
        required: true

  # Serves static content
  web:
    build:
      context: requirements/web
      dockerfile: Dockerfile
    networks:
      - transcendence
    restart: always
    env_file:
      - path: .env
        required: true
    volumes:
      - static:/usr/share/nginx/html
    healthcheck:
      test: "curl http://127.0.0.1/"
      interval: 2s
      retries: 10
      start_period: 5s

  # Handles the gameplay and the synchronisation of the games between multiple clients.
  pong:
    build:
      context: requirements/pong
      dockerfile: Dockerfile
    networks:
      - transcendence
    restart: always
    env_file:
      - path: .env
        required: true
    environment:
      WSGI_FILE: ${PONG_WSGI_FILE}
      PORT: ${PONG_PORT}
    healthcheck:
      test: "wget -O/dev/null -q http://127.0.0.1:$PONG_PORT"
      interval: 1s
      retries: 3
      start_period: 1s
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - pong:/var/www/html
 
  # Serves useful data about a player and its stats.
  api:
    build:
      context: requirements/api
      dockerfile: Dockerfile
    networks:
      - transcendence
    restart: always
    env_file:
      - path: .env
        required: true
    environment:
      WSGI_FILE: ${API_WSGI_FILE}
      PORT: ${API_PORT}
    healthcheck:
      test: "wget -O/dev/null -q http://127.0.0.1:${API_PORT}"
      interval: 1s
      retries: 3
      start_period: 1s
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - api:/var/www/html

  # Hold informations about the playerbase, the tournaments and whatever we need to store.
  postgresql:
    build:
      context: requirements/postgresql
      dockerfile: Dockerfile
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: "pg_isready -h 127.0.0.1 -p 5432 -t 2"
      interval: 2s
      retries: 10
      start_period: 15s
    env_file:
      - path: .env
        required: true
    volumes:
      - postgresql:/var/lib/postgresql
      
networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  static:
    driver_opts:
      o: bind
      type: none
      device: ${FRONT_ROOT_DIRECTORY}
  postgresql:
    driver_opts:
      o: bind
      type: none
      device: ${HOME}/ft_transcendence/postgresql
  api:
    driver_opts:
      o: bind
      type: none
      device: ${API_ROOT_DIRECTORY}
  pong:
    driver_opts:
      o: bind
      type: none
      device: ${PONG_ROOT_DIRECTORY}
